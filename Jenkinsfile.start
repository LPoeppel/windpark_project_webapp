#!groovy

properties ([
    [$class: 'GitLabConnectionProperty', gitLabConnection: 'htw'],
    buildDiscarder(logRotator(numToKeepStr: '10')),
    ])

timeout(time: 60, unit: 'MINUTES') {
ansiColor('css') {

    stage ('RUN APP') {
        node {
            checkout scm

            try {
                sh 'npm --prefix frontend run build'
                sh 'nohup npm --prefix backend run fire &'
                sleep(1500)
                echo "\u2713 BUILD success"
                currentBuild.result = 'SUCCESS'

            } catch (any) {
                echo "\u274C failure"
                currentBuild.result = 'FAILURE'
                mail()
                throw any //rethrow exception to prevent the build from proceeding
            }

        }
    }

}
}


@NonCPS
def mail() {

    def subject = '${DEFAULT_SUBJECT}'

    // nur fehlerhafte Builds melden
    if (currentBuild.result == "SUCCESS") {

        if (currentBuild.previousBuild != null &&
            currentBuild.previousBuild.result != 'SUCCESS') {
            subject = "Job '${JOB_NAME}' (${BUILD_NUMBER}) - back to normal"
        } else {
            return
        }

    }

    def attachLog = (currentBuild.result != "SUCCESS")
    emailext(body: '${DEFAULT_CONTENT}', attachLog: attachLog,
            replyTo: '$DEFAULT_REPLYTO', subject: subject,
            recipientProviders: [[$class: 'FailingTestSuspectsRecipientProvider'],
                                 [$class: 'DevelopersRecipientProvider'],
                                 [$class: 'CulpritsRecipientProvider']])
}

// vim: ft=groovy